(declare bool type)
(declare tt bool)
(declare ff bool)

(declare var type)

(declare lit type)
(declare pos (! x var lit))
(declare neg (! x var lit))

(declare clause type)
(declare cln clause)
(declare clc (! x lit (! c clause clause)))

; constructs for general clauses for R, Q, satlem

(declare concat_cl (! c1 clause (! c2 clause clause)))
(declare clr (! l lit (! c clause clause)))

; code to check resolutions

(program append ((c1 clause) (c2 clause)) clause
  (match c1 (cln c2) ((clc l c1') (clc l (append c1' c2)))))

; we use marks as follows:
; -- mark 1 to record if we are supposed to remove a positive occurrence of the variable.
; -- mark 2 to record if we are supposed to remove a negative occurrence of the variable.
; -- mark 3 if we did indeed remove the variable positively
; -- mark 4 if we did indeed remove the variable negatively
(program simplify_clause ((c clause)) clause
  (match c
    (cln cln)
    ((clc l c1)
      (match l
        ; Set mark 1 on v if it is not set, to indicate we should remove it.
        ; After processing the rest of the clause, set mark 3 if we were already
        ; supposed to remove v (so if mark 1 was set when we began).  Clear mark3
        ; if we were not supposed to be removing v when we began this call.
        ((pos v)
          (let m (ifmarked v tt (do (markvar v) ff))
          (let c' (simplify_clause c1)
            (match m
              (tt (do (ifmarked3 v v (markvar3 v)) c'))
              (ff (do (ifmarked3 v (markvar3 v) v) (markvar v) (clc l c')))))))
        ; the same as the code for tt, but using different marks.
        ((neg v)
          (let m (ifmarked2 v tt (do (markvar2 v) ff))
          (let c' (simplify_clause c1)
            (match m
              (tt (do (ifmarked4 v v (markvar4 v)) c'))
              (ff (do (ifmarked4 v (markvar4 v) v) (markvar2 v) (clc l c')))))))))
    ((concat_cl c1 c2) (append (simplify_clause c1) (simplify_clause c2)))
    ((clr l c1)
      (match l
        ; set mark 1 to indicate we should remove v, and fail if
        ; mark 3 is not set after processing the rest of the clause
        ; (we will set mark 3 if we remove a positive occurrence of v).
        ((pos v)
            (let m (ifmarked v tt (do (markvar v) ff))
            (let m3 (ifmarked3 v (do (markvar3 v) tt) ff)
            (let c' (simplify_clause c1)
              (ifmarked3 v (do (match m3 (tt v) (ff (markvar3 v)))
                                (match m (tt v) (ff (markvar v))) c')
                          (fail clause))))))
        ; same as the tt case, but with different marks.
        ((neg v)
            (let m2 (ifmarked2 v tt (do (markvar2 v) ff))
            (let m4 (ifmarked4 v (do (markvar4 v) tt) ff)
            (let c' (simplify_clause c1)
              (ifmarked4 v (do (match m4 (tt v) (ff (markvar4 v)))
                                (match m2 (tt v) (ff (markvar2 v))) c')
                          (fail clause))))))
   ))))


; resolution proofs

(declare holds (! c clause type))

(declare R (! c1 clause (! c2 clause
           (! u1 (holds c1)
           (! u2 (holds c2)
           (! n var
            (holds (concat_cl (clr (pos n) c1)
                     (clr (neg n) c2)))))))))

(declare Q (! c1 clause (! c2 clause
           (! u1 (holds c1)
           (! u2 (holds c2)
           (! n var
            (holds (concat_cl (clr (neg n) c1)
                     (clr (pos n) c2)))))))))

(declare satlem_simplify
                (! c1 clause
                (! c2 clause
                (! c3 clause
                (! u1 (holds c1)
                (! r (^ (simplify_clause c1) c2)
                (! u2 (! x (holds c2) (holds c3))
                   (holds c3))))))))

(declare satlem
  (! c clause
  (! c2 clause
  (! u (holds c)
  (! u2 (! v (holds c) (holds c2))
    (holds c2))))))

; A little example to demonstrate simplify_clause.
; It can handle nested clr's of both polarities,
; and correctly cleans up marks when it leaves a
; clr or clc scope.  Uncomment and run with
; --show-runs to see it in action.
;
; (check
;   (% v1 var
;   (% u1 (holds (concat_cl (clr (neg v1) (clr (pos v1) (clc (pos v1) (clr (pos v1) (clc (pos v1) (clc (neg v1) cln))))))
;                    (clc (pos v1) (clc (pos v1) cln))))
;    (satlem _ _ _ u1 (\ x x))))))


;(check
;   (% v1 var
;   (% u1 (holds (clr (neg v1) (concat_cl (clc (neg v1) cln)
;                                      (clr (neg v1) (clc (neg v1) cln)))))
;    (satlem _ _ _ u1 (\ x x))))))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; SMT syntax and semantics (not theory-specific)
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; depends on sat.plf

(declare formula type)
(declare th_holds (! f formula type))

; standard logic definitions
(declare true formula)
(declare false formula)

(define formula_op1
	(! f formula
	formula))

(define formula_op2
	(! f1 formula
	(! f2 formula
	   formula)))
	
(define formula_op3
	(! f1 formula
	(! f2 formula
	(! f3 formula
	   formula))))
	   
(declare not formula_op1)
(declare and formula_op2)
(declare or formula_op2)
(declare impl formula_op2)
(declare iff formula_op2)
(declare xor formula_op2)
(declare ifte formula_op3)

; terms
(declare sort type)
(declare term (! t sort type))	; declared terms in formula

; standard definitions for =, ite, let and flet
(declare = (! s sort
           (! x (term s)
           (! y (term s)
             formula))))
(declare ite (! s sort
             (! f formula
             (! t1 (term s)
             (! t2 (term s)
               (term s))))))
(declare let (! s sort
             (! t (term s)
             (! f (! v (term s) formula)
               formula))))
(declare flet (! f1 formula
              (! f2 (! v formula formula)
                formula)))

; We view applications of predicates as terms of sort "Bool".
; Such terms can be injected as atomic formulas using "p_app".
(declare Bool sort)				; the special sort for predicates
(declare p_app (! x (term Bool) formula))	; propositional application of term

; boolean terms
(declare t_true (term Bool))
(declare t_false (term Bool))
(declare t_t_neq_f
 (th_holds (not (= Bool t_true t_false))))
(declare pred_eq_t
 (! x (term Bool)
 (! u (th_holds (p_app x))
   (th_holds (= Bool x t_true)))))
(declare pred_eq_f
 (! x (term Bool)
 (! u (th_holds (not (p_app x)))
   (th_holds (= Bool x t_false)))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; CNF Clausification
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; binding between an LF var and an (atomic) formula

(declare atom (! v var (! p formula type)))

; binding between two LF vars
(declare bvatom (! sat_v var (! bv_v var type)))

(declare decl_atom
  (! f formula
  (! u (! v var
       (! a (atom v f)
         (holds cln)))
    (holds cln))))

;; declare atom enhanced with mapping
;; between SAT prop variable and BVSAT prop variable
(declare decl_bvatom
  (! f formula
  (! u (! v var
       (! bv_v var
       (! a (atom v f)
       (! bva (atom bv_v f)
       (! vbv (bvatom v bv_v)
         (holds cln))))))
    (holds cln))))
    
    
; clausify a formula directly
(declare clausify_form
  (! f formula
  (! v var
  (! a (atom v f)
  (! u (th_holds f)
    (holds (clc (pos v) cln)))))))
    
(declare clausify_form_not
  (! f formula
  (! v var
  (! a (atom v f)
  (! u (th_holds (not f))
    (holds (clc (neg v) cln)))))))
    
(declare clausify_false
  (! u (th_holds false)
    (holds cln)))

(declare th_let_pf
  (! f formula
  (! u (th_holds f)
  (! u2 (! v (th_holds f) (holds cln))
    (holds cln)))))

  
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; Natural deduction rules : used for CNF
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; for eager bit-blasting
(declare iff_symm
	(! f formula
	   (th_holds (iff f f))))


;; contradiction

(declare contra
  (! f formula
  (! r1 (th_holds f)
  (! r2 (th_holds (not f))
    (th_holds false)))))

; truth
(declare truth (th_holds true))

;; not not

(declare not_not_intro
  (! f formula
  (! u (th_holds f)
    (th_holds (not (not f))))))

(declare not_not_elim
  (! f formula
  (! u (th_holds (not (not f)))
    (th_holds f))))

;; or elimination

(declare or_elim_1
  (! f1 formula
  (! f2 formula
  (! u1 (th_holds (not f1))
  (! u2 (th_holds (or f1 f2))
    (th_holds f2))))))

(declare or_elim_2
  (! f1 formula
  (! f2 formula
  (! u1 (th_holds (not f2))
  (! u2 (th_holds (or f1 f2))
    (th_holds f1))))))

(declare not_or_elim
  (! f1 formula
  (! f2 formula
  (! u2 (th_holds (not (or f1 f2)))
    (th_holds (and (not f1) (not f2)))))))
    
;; and elimination

(declare and_elim_1
  (! f1 formula
  (! f2 formula
  (! u (th_holds (and f1 f2))
    (th_holds f1)))))

(declare and_elim_2
  (! f1 formula
  (! f2 formula
  (! u (th_holds (and f1 f2))
    (th_holds f2)))))

(declare not_and_elim
  (! f1 formula
  (! f2 formula
  (! u2 (th_holds (not (and f1 f2)))
    (th_holds (or (not f1) (not f2)))))))
    
;; impl elimination

(declare impl_intro (! f1 formula
                    (! f2 formula
                    (! i1 (! u (th_holds f1)
                              (th_holds f2))
                      (th_holds (impl f1 f2))))))

(declare impl_elim
  (! f1 formula
  (! f2 formula
  (! u2 (th_holds (impl f1 f2))
    (th_holds (or (not f1) f2))))))

(declare not_impl_elim
  (! f1 formula
  (! f2 formula
  (! u (th_holds (not (impl f1 f2)))
    (th_holds (and f1 (not f2)))))))
    
;; iff elimination

(declare iff_elim_1
  (! f1 formula
  (! f2 formula
  (! u1 (th_holds (iff f1 f2))
    (th_holds (or (not f1) f2))))))

(declare iff_elim_2
  (! f1 formula
  (! f2 formula
  (! u1 (th_holds (iff f1 f2))
    (th_holds (or f1 (not f2)))))))

(declare not_iff_elim
  (! f1 formula
  (! f2 formula
  (! u2 (th_holds (not (iff f1 f2)))
    (th_holds (iff f1 (not f2)))))))

; xor elimination

(declare xor_elim_1
  (! f1 formula
  (! f2 formula
  (! u1 (th_holds (xor f1 f2))
    (th_holds (or (not f1) (not f2)))))))

(declare xor_elim_2
  (! f1 formula
  (! f2 formula
  (! u1 (th_holds (xor f1 f2))
    (th_holds (or f1 f2))))))

(declare not_xor_elim
  (! f1 formula
  (! f2 formula
  (! u2 (th_holds (not (xor f1 f2)))
    (th_holds (iff f1 f2))))))

;; ite elimination

(declare ite_elim_1
  (! a formula
  (! b formula
  (! c formula
  (! u2 (th_holds (ifte a b c))
    (th_holds (or (not a) b)))))))

(declare ite_elim_2
  (! a formula
  (! b formula
  (! c formula
  (! u2 (th_holds (ifte a b c))
    (th_holds (or a c)))))))

(declare ite_elim_3
  (! a formula
  (! b formula
  (! c formula
  (! u2 (th_holds (ifte a b c))
    (th_holds (or b c)))))))

(declare not_ite_elim_1
  (! a formula
  (! b formula
  (! c formula
  (! u2 (th_holds (not (ifte a b c)))
    (th_holds (or (not a) (not b))))))))

(declare not_ite_elim_2
  (! a formula
  (! b formula
  (! c formula
  (! u2 (th_holds (not (ifte a b c)))
    (th_holds (or a (not c))))))))

(declare not_ite_elim_3
  (! a formula
  (! b formula
  (! c formula
  (! u2 (th_holds (not (ifte a b c)))
    (th_holds (or (not b) (not c))))))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; For theory lemmas
; - make a series of assumptions and then derive a contradiction (or false)
; - then the assumptions yield a formula like "v1 -> v2 -> ... -> vn -> false"
; - In CNF, it becomes a clause: "~v1, ~v2, ..., ~vn"
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(declare ast
  (! v var
  (! f formula
  (! C clause
  (! r (atom v f)       ;this is specified
  (! u (! o (th_holds f)
         (holds C))
    (holds (clc (neg v) C))))))))

(declare asf
  (! v var
  (! f formula
  (! C clause
  (! r (atom v f)
  (! u (! o (th_holds (not f))
         (holds C))
    (holds (clc (pos v) C))))))))

;; Bitvector lemma constructors to assume
;; the unit clause containing the assumptions
;; it also requires the mapping between bv_v and v
;; The resolution proof proving false will use bv_v as the definition clauses use bv_v
;; but the Problem clauses in the main SAT solver will use v so the learned clause is in terms of v
(declare bv_asf
  (! v var
  (! bv_v var
  (! f formula
  (! C clause
  (! r (atom v f) ;; passed in
  (! x (bvatom v bv_v) ; establishes the equivalence of v to bv_
  (! u (! o (holds (clc (neg bv_v) cln)) ;; l binding to be used in proof
         (holds C))
    (holds (clc (pos v) C))))))))))
    
(declare bv_ast
  (! v var
  (! bv_v var	
  (! f formula
  (! C clause
  (! r (atom v f)       ; this is specified
  (! x (bvatom v bv_v) ; establishes the equivalence of v to bv_v
  (! u (! o (holds (clc (pos bv_v) cln))
         (holds C))
    (holds (clc (neg v) C))))))))))


;; Example:
;;
;; Given theory literals (F1....Fn), and an input formula A of the form (th_holds (or F1 (or F2 .... (or F{n-1} Fn))))).
;;
;; We introduce atoms (a1,...,an) to map boolean literals (v1,...,vn) top literals (F1,...,Fn).
;; Do this at the beginning of the proof:
;;
;; (decl_atom F1 (\ v1 (\ a1
;; (decl_atom F2 (\ v2 (\ a2
;; ....
;; (decl_atom Fn (\ vn (\ an
;;
;;  A is then clausified by the following proof:
;;
;;(satlem _ _
;;(asf _ _ _ a1 (\ l1
;;(asf _ _ _ a2 (\ l2
;;...
;;(asf _ _ _ an (\ ln
;;(clausify_false
;;
;;   (contra _
;;      (or_elim_1 _ _ l{n-1}
;;	...
;;      (or_elim_1 _ _ l2
;; 	(or_elim_1 _ _ l1 A))))) ln)
;;	
;;))))))) (\ C
;;
;; We now have the free variable C, which should be the clause (v1 V ... V vn).
;;
;; Polarity of literals should be considered, say we have A of the form (th_holds (or (not F1) (or F2 (not F3)))).
;; Where necessary, we use "ast" instead of "asf", introduce negations by "not_not_intro" for pattern matching, and flip
;; the arguments of contra:
;;
;;(satlem _ _
;;(ast _ _ _ a1 (\ l1
;;(asf _ _ _ a2 (\ l2
;;(ast _ _ _ a3 (\ l3
;;(clausify_false
;;
;;   (contra _ l3
;;      (or_elim_1 _ _ l2
;; 	(or_elim_1 _ _ (not_not_intro l1) A))))
;;	
;;))))))) (\ C
;;
;; C should be the clause (~v1 V v2 V ~v3 )




;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; Theory of Equality and Congruence Closure
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; depends on : smt.plf

; sorts :

(declare arrow (! s1 sort (! s2 sort sort)))	; function constructor

; functions :

(declare apply (! s1 sort
               (! s2 sort
               (! t1 (term (arrow s1 s2))
               (! t2 (term s1)
                (term s2))))))


; inference rules :

(declare trust (th_holds false))	; temporary
(declare trust_f (! f formula (th_holds f)))  ; temporary

(declare refl
  (! s sort
  (! t (term s)
    (th_holds (= s t t)))))

(declare symm (! s sort
              (! x (term s)
              (! y (term s)
              (! u (th_holds (= _ x y))
                (th_holds (= _ y x)))))))

(declare trans (! s sort
               (! x (term s)
               (! y (term s)
               (! z (term s)
               (! u (th_holds (= _ x y))
               (! u (th_holds (= _ y z))
                 (th_holds (= _ x z)))))))))

(declare negsymm (! s sort
              	 (! x (term s)
              	 (! y (term s)
              	 (! u (th_holds (not (= _ x y)))
                   (th_holds (not (= _ y x))))))))

(declare negtrans1 (! s sort
                   (! x (term s)
              	   (! y (term s)
               	   (! z (term s)
               	   (! u (th_holds (not (= _ x y)))
               	   (! u (th_holds (= _ y z))
                     (th_holds (not (= _ x z))))))))))

(declare negtrans2 (! s sort
                   (! x (term s)
              	   (! y (term s)
               	   (! z (term s)
               	   (! u (th_holds (= _ x y))
               	   (! u (th_holds (not (= _ y z)))
                     (th_holds (not (= _ x z))))))))))

(declare cong (! s1 sort
              (! s2 sort
              (! a1 (term (arrow s1 s2))
              (! b1 (term (arrow s1 s2))
              (! a2 (term s1)
              (! b2 (term s1)
              (! u1 (th_holds (= _ a1 b1))
              (! u2 (th_holds (= _ a2 b2))
                (th_holds (= _ (apply _ _ a1 a2) (apply _ _ b1 b2))))))))))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Examples

; an example of "(p1 or p2(0)) and t1=t2(1)"
;(! p1 (term Bool)
;(! p2 (term (arrow Int Bool))
;(! t1 (term Int)
;(! t2 (term (arrow Int Int))
;(! F (th_holds (and (or (p_app p1) (p_app (apply _ _ p2 0)))
;                    (= _ t1 (apply _ _ t2 1))))
;  ...

; another example of "p3(a,b)"
;(! a (term Int)
;(! b (term Int)
;(! p3 (term (arrow Int (arrow Int Bool)))	; arrow is right assoc.
;(! F (th_holds (p_app (apply _ _ (apply _ _ p3 a) b))) ; apply is left assoc.
;  ...
(check
 ;; Declarations
(% I sort
(% a (term I)
(% c (term I)
(% b (term I)
(% f (term (arrow I (arrow I I)))
(% A0 (th_holds true)
(% A1 (th_holds (@ let3 c(not (= I (apply _ _ (apply _ _ f b)let3) (apply _ _ (apply _ _ f let3)let3)))))
(% A2 (th_holds (@ let9 c(not (= I (apply _ _ (apply _ _ f a)let9) (apply _ _ (apply _ _ f let9)let9)))))
(% A3 (th_holds (@ let15 c(not (= I (apply _ _ (apply _ _ f a)let15) (apply _ _ (apply _ _ f b)let15)))))
(% A4 (th_holds (@ let21 b(not (= I (apply _ _ (apply _ _ f let21)let21) (apply _ _ (apply _ _ f c)let21)))))
(% A5 (th_holds (@ let28 b(not (= I (apply _ _ (apply _ _ f a)let28) (apply _ _ (apply _ _ f c)let28)))))
(% A6 (th_holds (@ let35 b(not (= I (apply _ _ (apply _ _ f a)let35) (apply _ _ (apply _ _ f let35)let35)))))
(% A7 (th_holds (@ let41 a(not (= I (apply _ _ (apply _ _ f b)let41) (apply _ _ (apply _ _ f c)let41)))))
(% A8 (th_holds (@ let47 a(not (= I (apply _ _ (apply _ _ f let47)let47) (apply _ _ (apply _ _ f c)let47)))))
(% A9 (th_holds (@ let53 a(not (= I (apply _ _ (apply _ _ f let53)let53) (apply _ _ (apply _ _ f b)let53)))))
(% A10 (th_holds (@ let59 c(@ let60 a(@ let65 b(or (not (= I (apply _ _ (apply _ _ f let59)(apply _ _ (apply _ _ f let59)let60)) let60)) (or (not (= I (apply _ _ (apply _ _ f let59)(apply _ _ (apply _ _ f let59)let65)) let65)) (not (= I (apply _ _ (apply _ _ f let59)(apply _ _ (apply _ _ f let59)let59)) let59)) ))))))
(% A11 (th_holds (@ let75 b(@ let76 a(@ let85 c(or (not (= I (apply _ _ (apply _ _ f let75)(apply _ _ (apply _ _ f let75)let76)) let76)) (or (not (= I (apply _ _ (apply _ _ f let75)(apply _ _ (apply _ _ f let75)let75)) let75)) (not (= I (apply _ _ (apply _ _ f let75)(apply _ _ (apply _ _ f let75)let85)) let85)) ))))))
(% A12 (th_holds (@ let91 a(@ let96 b(@ let101 c(or (not (= I (apply _ _ (apply _ _ f let91)(apply _ _ (apply _ _ f let91)let91)) let91)) (or (not (= I (apply _ _ (apply _ _ f let91)(apply _ _ (apply _ _ f let91)let96)) let96)) (not (= I (apply _ _ (apply _ _ f let91)(apply _ _ (apply _ _ f let91)let101)) let101)) ))))))
(% A13 (th_holds (@ let107 c(not (= I (apply _ _ (apply _ _ f let107)let107) let107))))
(% A14 (th_holds (@ let111 b(not (= I (apply _ _ (apply _ _ f let111)let111) let111))))
(% A15 (th_holds (@ let115 a(not (= I (apply _ _ (apply _ _ f let115)let115) let115))))
(% A16 (th_holds (@ let119 a(@ let120 c(@ let123 b(or (= I (apply _ _ (apply _ _ f let119)let120) let119) (or (= I (apply _ _ (apply _ _ f let123)let120) let123) (= I (apply _ _ (apply _ _ f let120)let120) let120) ))))))
(% A17 (th_holds (@ let129 a(@ let130 b(@ let135 c(or (= I (apply _ _ (apply _ _ f let129)let130) let129) (or (= I (apply _ _ (apply _ _ f let130)let130) let130) (= I (apply _ _ (apply _ _ f let135)let130) let135) ))))))
(% A18 (th_holds (@ let139 a(@ let142 b(@ let145 c(or (= I (apply _ _ (apply _ _ f let139)let139) let139) (or (= I (apply _ _ (apply _ _ f let142)let139) let142) (= I (apply _ _ (apply _ _ f let145)let139) let145) ))))))
(% A19 (th_holds (@ let149 a(@ let151 c(@ let153 b(or (= I (apply _ _ (apply _ _ f let149)let149) let151) (or (= I (apply _ _ (apply _ _ f let153)let153) let151) (= I (apply _ _ (apply _ _ f let151)let151) let151) ))))))
(% A20 (th_holds (@ let159 a(@ let161 b(@ let165 c(or (= I (apply _ _ (apply _ _ f let159)let159) let161) (or (= I (apply _ _ (apply _ _ f let161)let161) let161) (= I (apply _ _ (apply _ _ f let165)let165) let161) ))))))
(% A21 (th_holds (@ let169 a(@ let172 b(@ let175 c(or (= I (apply _ _ (apply _ _ f let169)let169) let169) (or (= I (apply _ _ (apply _ _ f let172)let172) let169) (= I (apply _ _ (apply _ _ f let175)let175) let169) ))))))
(% A22 (th_holds (@ let179 c(@ let180 (apply _ _ (apply _ _ f let179)let179)(or (= I let180 a) (or (= I let180 b) (= I let180 let179) )))))
(% A23 (th_holds (@ let187 c(@ let188 b(@ let189 (apply _ _ (apply _ _ f let187)let188)(or (= I let189 a) (or (= I let189 let188) (= I let189 let187) ))))))
(% A24 (th_holds (@ let195 c(@ let196 a(@ let197 (apply _ _ (apply _ _ f let195)let196)(or (= I let197 let196) (or (= I let197 b) (= I let197 let195) ))))))
(% A25 (th_holds (@ let203 b(@ let204 c(@ let205 (apply _ _ (apply _ _ f let203)let204)(or (= I let205 a) (or (= I let205 let203) (= I let205 let204) ))))))
(% A26 (th_holds (@ let211 b(@ let212 (apply _ _ (apply _ _ f let211)let211)(or (= I let212 a) (or (= I let212 let211) (= I let212 c) )))))
(% A27 (th_holds (@ let219 b(@ let220 a(@ let221 (apply _ _ (apply _ _ f let219)let220)(or (= I let221 let220) (or (= I let221 let219) (= I let221 c) ))))))
(% A28 (th_holds (@ let227 a(@ let228 c(@ let229 (apply _ _ (apply _ _ f let227)let228)(or (= I let229 let227) (or (= I let229 b) (= I let229 let228) ))))))
(% A29 (th_holds (@ let235 a(@ let236 b(@ let237 (apply _ _ (apply _ _ f let235)let236)(or (= I let237 let235) (or (= I let237 let236) (= I let237 c) ))))))
(% A30 (th_holds (@ let243 a(@ let244 (apply _ _ (apply _ _ f let243)let243)(or (= I let244 let243) (or (= I let244 b) (= I let244 c) )))))
(: (holds cln)

 ;; Printing deferred declarations 

 ;; In the preprocessor we trust 
(th_let_pf _ (trust_f (@ let251 b(not (= I (apply _ _ (apply _ _ f let251)let251) (apply _ _ (apply _ _ f c)let251))))) (\ .PA310
(th_let_pf _ (trust_f (@ let257 c(not (= I let257 (apply _ _ (apply _ _ f let257)let257))))) (\ .PA361
(th_let_pf _ (trust_f (@ let261 a(not (= I (apply _ _ (apply _ _ f let261)let261) (apply _ _ (apply _ _ f b)let261))))) (\ .PA300
(th_let_pf _ (trust_f (@ let267 a(@ let268 (apply _ _ (apply _ _ f let267)let267)(or (= I let267 let268) (or (= I b let268) (= I c let268) ))))) (\ .PA320
(th_let_pf _ (trust_f (@ let275 b(@ let276 a(@ let281 c(or (= I let275 (apply _ _ (apply _ _ f let276)let276)) (or (= I let275 (apply _ _ (apply _ _ f let275)let275)) (= I let275 (apply _ _ (apply _ _ f let281)let281)) )))))) (\ .PA354
(th_let_pf _ (trust_f (@ let285 a(not (= I (apply _ _ (apply _ _ f let285)let285) (apply _ _ (apply _ _ f c)let285))))) (\ .PA302
(th_let_pf _ (trust_f (@ let292 a(not (= I (apply _ _ (apply _ _ f b)let292) (apply _ _ (apply _ _ f c)let292))))) (\ .PA304
(th_let_pf _ (trust_f (@ let298 a(@ let299 c(@ let300 (apply _ _ (apply _ _ f let299)let298)(or (= I let298 let300) (or (= I b let300) (= I let299 let300) )))))) (\ .PA344
(th_let_pf _ (trust_f (@ let306 b(not (= I let306 (apply _ _ (apply _ _ f let306)let306))))) (\ .PA360
(th_let_pf _ (trust_f (@ let311 b(not (= I (apply _ _ (apply _ _ f a)let311) (apply _ _ (apply _ _ f let311)let311))))) (\ .PA306
(th_let_pf _ (trust_f (@ let317 c(@ let318 b(@ let319 (apply _ _ (apply _ _ f let317)let318)(or (= I a let319) (or (= I let318 let319) (= I let317 let319) )))))) (\ .PA348
(th_let_pf _ (trust_f (@ let324 a(not (= I let324 (apply _ _ (apply _ _ f let324)let324))))) (\ .PA359
(th_let_pf _ (trust_f (@ let329 b(not (= I (apply _ _ (apply _ _ f a)let329) (apply _ _ (apply _ _ f c)let329))))) (\ .PA308
(th_let_pf _ (trust_f (@ let335 a(@ let338 b(@ let341 c(or (= I let335 (apply _ _ (apply _ _ f let335)let335)) (or (= I let338 (apply _ _ (apply _ _ f let338)let335)) (= I let341 (apply _ _ (apply _ _ f let341)let335)) )))))) (\ .PA356
(th_let_pf _ (trust_f (@ let345 c(@ let346 a(@ let349 b(or (= I let345 (apply _ _ (apply _ _ f let346)let346)) (or (= I let345 (apply _ _ (apply _ _ f let349)let349)) (= I let345 (apply _ _ (apply _ _ f let345)let345)) )))))) (\ .PA355
(th_let_pf _ (trust_f (@ let355 a(@ let356 b(@ let361 c(or (= I let355 (apply _ _ (apply _ _ f let355)let356)) (or (= I let356 (apply _ _ (apply _ _ f let356)let356)) (= I let361 (apply _ _ (apply _ _ f let361)let356)) )))))) (\ .PA357
(th_let_pf _ (trust_f (@ let365 a(@ let368 b(@ let371 c(or (= I let365 (apply _ _ (apply _ _ f let365)let365)) (or (= I let365 (apply _ _ (apply _ _ f let368)let368)) (= I let365 (apply _ _ (apply _ _ f let371)let371)) )))))) (\ .PA353
(th_let_pf _ (trust_f (@ let375 a(@ let376 c(@ let381 b(or (not (= I let375 (apply _ _ (apply _ _ f let376)(apply _ _ (apply _ _ f let376)let375)))) (or (not (= I let381 (apply _ _ (apply _ _ f let376)(apply _ _ (apply _ _ f let376)let381)))) (not (= I let376 (apply _ _ (apply _ _ f let376)(apply _ _ (apply _ _ f let376)let376)))) )))))) (\ .PA382

;; Printing mapping from preprocessed assertions into atoms 
(decl_atom (@ let391 b(= I (apply _ _ (apply _ _ f let391)let391) (apply _ _ (apply _ _ f c)let391))) (\ .v43 (\ .a43
(decl_atom (@ let396 a(= I (apply _ _ (apply _ _ f let396)let396) (apply _ _ (apply _ _ f b)let396))) (\ .v38 (\ .a38
(decl_atom (@ let402 a(= I b (apply _ _ (apply _ _ f let402)let402))) (\ .v3 (\ .a3
(decl_atom (@ let406 c(= I b (apply _ _ (apply _ _ f let406)let406))) (\ .v27 (\ .a27
(decl_atom (@ let409 a(= I (apply _ _ (apply _ _ f let409)let409) (apply _ _ (apply _ _ f c)let409))) (\ .v39 (\ .a39
(decl_atom (@ let415 a(= I (apply _ _ (apply _ _ f b)let415) (apply _ _ (apply _ _ f c)let415))) (\ .v40 (\ .a40
(decl_atom (= I b (apply _ _ (apply _ _ f c)a)) (\ .v21 (\ .a21
(decl_atom (@ let425 a(= I let425 (apply _ _ (apply _ _ f c)let425))) (\ .v20 (\ .a20
(decl_atom (@ let430 b(= I (apply _ _ (apply _ _ f a)let430) (apply _ _ (apply _ _ f let430)let430))) (\ .v41 (\ .a41
(decl_atom (= I a (apply _ _ (apply _ _ f c)b)) (\ .v23 (\ .a23
(decl_atom (@ let439 b(= I let439 (apply _ _ (apply _ _ f c)let439))) (\ .v24 (\ .a24
(decl_atom (@ let444 b(= I (apply _ _ (apply _ _ f a)let444) (apply _ _ (apply _ _ f c)let444))) (\ .v42 (\ .a42
(decl_atom (@ let449 b(= I let449 (apply _ _ (apply _ _ f let449)a))) (\ .v12 (\ .a12
(decl_atom (@ let453 c(= I let453 (apply _ _ (apply _ _ f let453)a))) (\ .v22 (\ .a22
(decl_atom (@ let457 c(= I let457 (apply _ _ (apply _ _ f let457)let457))) (\ .v28 (\ .a28
(decl_atom (@ let461 a(= I c (apply _ _ (apply _ _ f let461)let461))) (\ .v4 (\ .a4
(decl_atom (@ let465 b(= I c (apply _ _ (apply _ _ f let465)let465))) (\ .v16 (\ .a16
(decl_atom (@ let468 b(= I let468 (apply _ _ (apply _ _ f let468)let468))) (\ .v15 (\ .a15
(decl_atom (@ let471 c(= I let471 (apply _ _ (apply _ _ f let471)b))) (\ .v25 (\ .a25
(decl_atom (@ let475 a(= I let475 (apply _ _ (apply _ _ f let475)b))) (\ .v5 (\ .a5
(decl_atom (@ let479 a(= I let479 (apply _ _ (apply _ _ f let479)let479))) (\ .v2 (\ .a2
(decl_atom (@ let483 b(= I a (apply _ _ (apply _ _ f let483)let483))) (\ .v14 (\ .a14
(decl_atom (@ let487 c(= I a (apply _ _ (apply _ _ f let487)let487))) (\ .v26 (\ .a26
(decl_atom (@ let490 b(@ let491 c(= I let490 (apply _ _ (apply _ _ f let491)(apply _ _ (apply _ _ f let491)let490))))) (\ .v36 (\ .a36
(decl_atom (@ let495 a(@ let496 c(= I let495 (apply _ _ (apply _ _ f let496)(apply _ _ (apply _ _ f let496)let495))))) (\ .v35 (\ .a35
(decl_atom (@ let500 c(= I let500 (apply _ _ (apply _ _ f let500)(apply _ _ (apply _ _ f let500)let500)))) (\ .v37 (\ .a37
(satlem _ _ (ast _ _ _ .a37 (\ .l75 (ast _ _ _ .a35 (\ .l71 (ast _ _ _ .a36 (\ .l73 (clausify_false (contra _ .l75 (or_elim_1 _ _ (not_not_intro _ .l73) (or_elim_1 _ _ (not_not_intro _ .l71) .PA382)))))))))) (\ .pb24
(satlem _ _ (asf _ _ _ .a26 (\ .l52 (asf _ _ _ .a14 (\ .l28 (asf _ _ _ .a2 (\ .l4 (clausify_false (contra _ (or_elim_1 _ _ .l28 (or_elim_1 _ _ .l4 .PA353)) .l52)))))))) (\ .pb13
(satlem _ _ (asf _ _ _ .a5 (\ .l10 (asf _ _ _ .a25 (\ .l50 (asf _ _ _ .a15 (\ .l30 (clausify_false (contra _ (or_elim_1 _ _ .l30 (or_elim_1 _ _ .l10 .PA357)) .l50)))))))) (\ .pb17
(satlem _ _ (asf _ _ _ .a16 (\ .l32 (asf _ _ _ .a4 (\ .l8 (asf _ _ _ .a28 (\ .l56 (clausify_false (contra _ (or_elim_1 _ _ .l32 (or_elim_1 _ _ .l8 .PA355)) .l56)))))))) (\ .pb15
(satlem _ _ (asf _ _ _ .a22 (\ .l44 (asf _ _ _ .a12 (\ .l24 (asf _ _ _ .a2 (\ .l4 (clausify_false (contra _ (or_elim_1 _ _ .l24 (or_elim_1 _ _ .l4 .PA356)) .l44)))))))) (\ .pb16
(satlem _ _ (ast _ _ _ .a42 (\ .l85 (clausify_false (contra _ .l85 .PA308)))) (\ .pb29
(satlem _ _ (ast _ _ _ .a2 (\ .l5 (clausify_false (contra _ .l5 .PA359)))) (\ .pb19
(satlem _ _ (asf _ _ _ .a24 (\ .l48 (asf _ _ _ .a23 (\ .l46 (asf _ _ _ .a25 (\ .l50 (clausify_false (contra _ (or_elim_1 _ _ .l48 (or_elim_1 _ _ .l46 .PA348)) .l50)))))))) (\ .pb11
(satlem _ _ (ast _ _ _ .a41 (\ .l83 (clausify_false (contra _ .l83 .PA306)))) (\ .pb28
(satlem _ _ (ast _ _ _ .a15 (\ .l31 (clausify_false (contra _ .l31 .PA360)))) (\ .pb20
(satlem _ _ (asf _ _ _ .a22 (\ .l44 (asf _ _ _ .a20 (\ .l40 (asf _ _ _ .a21 (\ .l42 (clausify_false (contra _ (or_elim_1 _ _ .l42 (or_elim_1 _ _ .l40 .PA344)) .l44)))))))) (\ .pb10
(satlem _ _ (ast _ _ _ .a40 (\ .l81 (clausify_false (contra _ .l81 .PA304)))) (\ .pb27
(satlem _ _ (ast _ _ _ .a39 (\ .l79 (clausify_false (contra _ .l79 .PA302)))) (\ .pb26
(satlem _ _ (asf _ _ _ .a27 (\ .l54 (asf _ _ _ .a3 (\ .l6 (asf _ _ _ .a15 (\ .l30 (clausify_false (contra _ (or_elim_1 _ _ .l30 (or_elim_1 _ _ .l6 .PA354)) .l54)))))))) (\ .pb14
(satlem _ _ (asf _ _ _ .a4 (\ .l8 (asf _ _ _ .a3 (\ .l6 (asf _ _ _ .a2 (\ .l4 (clausify_false (contra _ (or_elim_1 _ _ .l6 (or_elim_1 _ _ .l4 .PA320)) .l8)))))))) (\ .pb4
(satlem _ _ (ast _ _ _ .a38 (\ .l77 (clausify_false (contra _ .l77 .PA300)))) (\ .pb25
(satlem _ _ (ast _ _ _ .a28 (\ .l57 (clausify_false (contra _ .l57 .PA361)))) (\ .pb21
(satlem _ _ (ast _ _ _ .a43 (\ .l87 (clausify_false (contra _ .l87 .PA310)))) (\ .pb30
 ;; Theory Lemmas 
;; BB atom mapping
;; Bit-blasting definitional clauses 
;; Bit-blasting learned clauses 
(satlem _ _ (asf _ _ _ .a37 (\ .l74 (ast _ _ _ .a26 (\ .l53 (ast _ _ _ .a22 (\ .l45  ;; UF Theory Lemma 
;;(= c (f c (f c c))) (not (= a (f c c))) (not (= c (f c a))) 
(clausify_false (contra _ (trans _ _ _ _ .l45 (symm _ _ _ (cong _ _ _ _ _ _ (trans _ _ _ _ (cong _ _ _ _ _ _ (refl _ f) (refl _ c)) (symm _ _ _ (cong _ _ _ _ _ _ (refl _ f) (refl _ c)))) (symm _ _ _ .l53)))) .l74))
))))))( \ .lemc44
(satlem _ _ (ast _ _ _ .a14 (\ .l29 (ast _ _ _ .a5 (\ .l11 (ast _ _ _ .a16 (\ .l33 (ast _ _ _ .a22 (\ .l45 (asf _ _ _ .a41 (\ .l82  ;; UF Theory Lemma 
;;(not (= a (f b b))) (not (= a (f a b))) (not (= c (f b b))) (not (= c (f c a))) (= (f a b) (f b b)) 
(clausify_false (contra _ (trans _ _ _ _ (symm _ _ _ .l11) .l29) .l82))
))))))))))( \ .lemc45
(satlem _ _ (ast _ _ _ .a25 (\ .l51 (ast _ _ _ .a16 (\ .l33 (asf _ _ _ .a43 (\ .l86  ;; UF Theory Lemma 
;;(not (= c (f c b))) (not (= c (f b b))) (= (f b b) (f c b)) 
(clausify_false (contra _ (trans _ _ _ _ (symm _ _ _ .l33) .l51) .l86))
))))))( \ .lemc46
(satlem _ _ (ast _ _ _ .a4 (\ .l9 (ast _ _ _ .a22 (\ .l45 (asf _ _ _ .a39 (\ .l78  ;; UF Theory Lemma 
;;(not (= c (f a a))) (not (= c (f c a))) (= (f a a) (f c a)) 
(clausify_false (contra _ (trans _ _ _ _ (trans _ _ _ _  (symm _ _ _ .l9).l9) (symm _ _ _ (trans _ _ _ _ (symm _ _ _ .l45) .l9))) .l78))
))))))( \ .lemc38
(satlem _ _ (ast _ _ _ .a12 (\ .l25 (ast _ _ _ .a3 (\ .l7 (asf _ _ _ .a38 (\ .l76  ;; UF Theory Lemma 
;;(not (= b (f b a))) (not (= b (f a a))) (= (f a a) (f b a)) 
(clausify_false (contra _ (trans _ _ _ _ (symm _ _ _ .l7) .l25) .l76))
))))))( \ .lemc47
(satlem _ _ (asf _ _ _ .a36 (\ .l72 (ast _ _ _ .a25 (\ .l51 (ast _ _ _ .a27 (\ .l55  ;; UF Theory Lemma 
;;(= b (f c (f c b))) (not (= c (f c b))) (not (= b (f c c))) 
(clausify_false (contra _ (trans _ _ _ _ .l55 (symm _ _ _ (cong _ _ _ _ _ _ (trans _ _ _ _ (cong _ _ _ _ _ _ (refl _ f) (refl _ c)) (symm _ _ _ (cong _ _ _ _ _ _ (refl _ f) (refl _ c)))) (symm _ _ _ .l51)))) .l72))
))))))( \ .lemc40
(satlem _ _ (asf _ _ _ .a37 (\ .l74 (ast _ _ _ .a25 (\ .l51 (ast _ _ _ .a27 (\ .l55  ;; UF Theory Lemma 
;;(= c (f c (f c c))) (not (= c (f c b))) (not (= b (f c c))) 
(clausify_false (contra _ (trans _ _ _ _ .l51 (symm _ _ _ (cong _ _ _ _ _ _ (trans _ _ _ _ (cong _ _ _ _ _ _ (refl _ f) (refl _ c)) (symm _ _ _ (cong _ _ _ _ _ _ (refl _ f) (refl _ c)))) (symm _ _ _ .l55)))) .l74))
))))))( \ .lemc37
(satlem _ _ (ast _ _ _ .a27 (\ .l55 (ast _ _ _ .a26 (\ .l53 (ast _ _ _ .a5 (\ .l11 (ast _ _ _ .a24 (\ .l49 (asf _ _ _ .a42 (\ .l84  ;; UF Theory Lemma 
;;(not (= b (f c c))) (not (= a (f c c))) (not (= a (f a b))) (not (= b (f c b))) (= (f a b) (f c b)) 
(clausify_false (contra _ (trans _ _ _ _ (trans _ _ _ _ (trans _ _ _ _ (trans _ _ _ _ (symm _ _ _ .l11) .l53) (symm _ _ _ .l55)) .l55) (symm _ _ _ (trans _ _ _ _ (symm _ _ _ .l49) .l55))) .l84))
))))))))))( \ .lemc34
(satlem _ _ (ast _ _ _ .a14 (\ .l29 (ast _ _ _ .a12 (\ .l25 (ast _ _ _ .a5 (\ .l11 (asf _ _ _ .a41 (\ .l82  ;; UF Theory Lemma 
;;(not (= a (f b b))) (not (= b (f b a))) (not (= a (f a b))) (= (f a b) (f b b)) 
(clausify_false (contra _ (trans _ _ _ _ (symm _ _ _ .l11) .l29) .l82))
))))))))( \ .lemc35
(satlem _ _ (ast _ _ _ .a23 (\ .l47 (ast _ _ _ .a5 (\ .l11 (asf _ _ _ .a42 (\ .l84  ;; UF Theory Lemma 
;;(not (= a (f c b))) (not (= a (f a b))) (= (f a b) (f c b)) 
(clausify_false (contra _ (trans _ _ _ _ (symm _ _ _ .l11) .l47) .l84))
))))))( \ .lemc36
(satlem _ _ (asf _ _ _ .a35 (\ .l70 (ast _ _ _ .a20 (\ .l41  ;; UF Theory Lemma 
;;(= a (f c (f c a))) (not (= a (f c a))) 
(clausify_false (contra _ (trans _ _ _ _ .l41 (symm _ _ _ (cong _ _ _ _ _ _ (cong _ _ _ _ _ _ (refl _ f) (refl _ c)) (symm _ _ _ .l41)))) .l70))
))))( \ .lemc41
(satlem _ _ (ast _ _ _ .a21 (\ .l43 (ast _ _ _ .a12 (\ .l25 (asf _ _ _ .a40 (\ .l80  ;; UF Theory Lemma 
;;(not (= b (f c a))) (not (= b (f b a))) (= (f b a) (f c a)) 
(clausify_false (contra _ (trans _ _ _ _ (symm _ _ _ .l25) .l43) .l80))
))))))( \ .lemc42
(satlem _ _ (asf _ _ _ .a35 (\ .l70 (ast _ _ _ .a26 (\ .l53 (ast _ _ _ .a22 (\ .l45  ;; UF Theory Lemma 
;;(= a (f c (f c a))) (not (= a (f c c))) (not (= c (f c a))) 
(clausify_false (contra _ (trans _ _ _ _ .l53 (symm _ _ _ (cong _ _ _ _ _ _ (trans _ _ _ _ (cong _ _ _ _ _ _ (refl _ f) (refl _ c)) (symm _ _ _ (cong _ _ _ _ _ _ (refl _ f) (refl _ c)))) (symm _ _ _ .l45)))) .l70))
))))))( \ .lemc57
(satlem _ _ (asf _ _ _ .a36 (\ .l72 (ast _ _ _ .a24 (\ .l49  ;; UF Theory Lemma 
;;(= b (f c (f c b))) (not (= b (f c b))) 
(clausify_false (contra _ (trans _ _ _ _ .l49 (symm _ _ _ (cong _ _ _ _ _ _ (cong _ _ _ _ _ _ (refl _ f) (refl _ c)) (symm _ _ _ .l49)))) .l72))
))))( \ .lemc59
(satlem_simplify _ _ _ (R _ _ (Q _ _ (R _ _ (R _ _ (R _ _ (R _ _ (Q _ _ (R _ _ (Q _ _ (R _ _ .lemc34 .pb29 .v42).pb13 .v26).pb19 .v2).pb11 .v24).lemc35 .v14).pb28 .v41).lemc36 .v23).pb29 .v42).pb17 .v5).pb20 .v15)(\ .cl39
(satlem_simplify _ _ _ (R _ _ (Q _ _ (R _ _ (Q _ _ (R _ _ (R _ _ (R _ _ (Q _ _ (R _ _ (R _ _ (Q _ _ (Q _ _ (Q _ _ (Q _ _ (R _ _ .lemc40 .pb24 .v36).lemc37 .v37).cl39 .v25).lemc41 .v35).pb10 .v20).lemc42 .v21).pb27 .v40).pb16 .v12).pb19 .v2).lemc38 .v22).pb26 .v39).pb14 .v27).pb20 .v15).pb4 .v4).pb19 .v2)(\ .cl43
(satlem_simplify _ _ _ (R _ _ (Q _ _ .lemc47 .cl43 .v3).pb25 .v38)(\ .cl48
(satlem_simplify _ _ _ (R _ _ (R _ _ .pb16 .cl48 .v12).pb19 .v2)(\ .cl49
(satlem_simplify _ _ _ (R _ _ (Q _ _ .lemc38 .cl49 .v22).pb26 .v39)(\ .cl50
(satlem_simplify _ _ _ (R _ _ (R _ _ .pb15 .cl50 .v4).pb21 .v28)(\ .cl51
(satlem_simplify _ _ _ (R _ _ (Q _ _ .lemc46 .cl51 .v16).pb30 .v43)(\ .cl52
(satlem_simplify _ _ _ (R _ _ (R _ _ .pb17 .cl52 .v25).pb20 .v15)(\ .cl53
(satlem_simplify _ _ _ (R _ _ (Q _ _ (Q _ _ (Q _ _ .lemc45 .cl53 .v5).cl51 .v16).cl49 .v22).pb28 .v41)(\ .cl54
(satlem_simplify _ _ _ (R _ _ (R _ _ .pb13 .cl54 .v14).pb19 .v2)(\ .cl55
(satlem_simplify _ _ _ (Q _ _ (Q _ _ .lemc44 .cl55 .v26).cl49 .v22)(\ .cl56
(satlem_simplify _ _ _ (Q _ _ (Q _ _ .lemc57 .cl55 .v26).cl49 .v22)(\ .cl58
(satlem_simplify _ _ _ (R _ _ (Q _ _ .lemc36 .cl53 .v5).pb29 .v42)(\ .cl60
(satlem_simplify _ _ _ (R _ _ (R _ _ .pb11 .cl60 .v23).cl52 .v25)(\ .cl61
(satlem_simplify _ _ _ (Q _ _ .lemc59 .cl61 .v24)(\ .cl62
(satlem_simplify _ _ _ (Q _ _ (Q _ _ (Q _ _ .pb24 .cl56 .v37).cl58 .v35).cl62 .v36)(\ empty empty))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
;;
