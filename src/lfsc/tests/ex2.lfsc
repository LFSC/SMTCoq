unsat
(check
 ;; Declarations
(% a (term Bool)
(% b (term Bool)
(% c (term Bool)
(% d (term Bool)
(% A3 (th_holds true)
(% A0 (th_holds (and (p_app a) (p_app b)))
(% A1 (th_holds (or (p_app c) (p_app d)))
(% A2 (th_holds (not (or (p_app c) (and (p_app a) (and (p_app b) (p_app d))))))
(: (holds cln)

 ;; Printing deferred declarations 


;; BV const letification



 ;; Printing the global let map
(@ let1 (p_app a)
(@ let2 (p_app b)
(@ let3 (p_app c)
(@ let4 (p_app d)

 ;; Printing aliasing declarations 


 ;; Rewrites for Lemmas 

 ;; In the preprocessor we trust 
(th_let_pf _ (trust_f (iff (not (or let3 (and let1 (and let2 let4)))) (not (or let3 (and let1 (and let2 let4 ))))))(\ .PA229

;; Printing mapping from preprocessed assertions into atoms 
(decl_atom let1 (\ .v2 (\ .a2
(decl_atom let2 (\ .v3 (\ .a3
(decl_atom let3 (\ .v4 (\ .a4
(decl_atom let4 (\ .v5 (\ .a5
(satlem _ _ (asf _ _ _ .a2 (\ .l4 (clausify_false (contra _ (and_elim_1 _ _ A0) .l4)))) (\ .pb4
(satlem _ _ (asf _ _ _ .a3 (\ .l6 (clausify_false (contra _ (and_elim_2 _ _ A0) .l6)))) (\ .pb5
(satlem _ _ (asf _ _ _ .a5 (\ .l10 (asf _ _ _ .a4 (\ .l8 (clausify_false (contra _ (or_elim_1 _ _ .l8 A1) .l10)))))) (\ .pb6
(satlem _ _ (ast _ _ _ .a4 (\ .l9 (clausify_false (contra _ .l9 (and_elim_1 _ _ (not_or_elim _ _ (or_elim_1 _ _ (not_not_intro _ A2) (iff_elim_1 _ _ .PA229)))))))) (\ .pb7
(satlem _ _ (ast _ _ _ .a5 (\ .l11 (ast _ _ _ .a3 (\ .l7 (ast _ _ _ .a2 (\ .l5 (clausify_false (contra _ .l11 (or_elim_1 _ _ (not_not_intro _ .l7) (not_and_elim _ _ (or_elim_1 _ _ (not_not_intro _ .l5) (not_and_elim _ _ (and_elim_2 _ _ (not_or_elim _ _ (or_elim_1 _ _ (not_not_intro _ A2) (iff_elim_1 _ _ .PA229)))))))))))))))) (\ .pb8
 ;; Theory Lemmas 

;; BB atom mapping


;; Bit-blasting definitional clauses 


 ;; Bit-blasting learned clauses 

(satlem_simplify _ _ _ (R _ _ .pb6 .pb7 .v4) (\ .cl9
(satlem_simplify _ _ _ (Q _ _ (Q _ _ (Q _ _ .pb8 .cl9 .v5) .pb5 .v3) .pb4 .v2) (\ empty empty))))))))))))))))))))))))))))))))))))))))))
;;
